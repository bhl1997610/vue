'use strict';
/**
 * @file boxApp.js
 * @author wutai
 */ 
 const objectTools = require('./util/objectTool.js');
 const qs = require('querystring');
 const crypto = require('crypto');
 const request = require('request');
/**
 * boxApp类
 *
 * @class
 * @constructor
 * @param {string} server 服务域
 * @param {string} app_id 应用ID.
 * @param {string} app_key  appkey.
 * @param {string} timeout  超时.
 */

class BoxApp {
    constructor(server, app_id, app_key, timeout) {
        this.app_id = app_id;
        this.app_key = app_key;
        this.timeout = timeout || 10000 ;
        this.server = server;
    }

    objKeySort(obj) {
        let newKey = Object.keys(obj).sort();
        let newObj = {};
        for (let i = 0; i < newKey.length; i++) {
            newObj[newKey[i]] = obj[newKey[i]];
        }
        return newObj;
    }

    sign (params) {
        let newObject = this.objKeySort(params);
        let str = '';
        for(let key in newObject) {
            str += key + '=' + newObject[key] + '&' 
        }
        str = str.substring(0,str.length-1);
        let md5 = crypto.createHash('md5');
        let password = md5.update(str + this.app_key).digest("hex");
        return password;
    }

    commonHttp (url, method, params, headers = {}) {
        params['app_id'] = this.app_id;
        params['timestamp'] = Math.floor(Date.parse(new Date())/1000);
        params['signature'] = this.sign(params);
        if (method === 'POST') {
            return new Promise((resolve, reject) => {
                request.post({'url': this.server + url, 'form' : params, 'timeout': this.timeout}, (error, response, body) => {
                    if (error === null) {
                        try {
                            resolve(JSON.parse(body));
                        } catch (e) {
                            // 无法解析json请求，就返回原始body
                            resolve(body);
                        }
                    } else {
                        reject(error);
                    }
                });
            });
        } else {
            let paramsStr = qs.stringify(params);
            return new Promise((resolve, reject) => {
                request.get(this.server + url + '?' + paramsStr, {timeout: this.timeout}, (error, response, body) => {
                    if (error === null) {
                        try {
                            resolve(JSON.parse(body));
                        } catch (e) {
                            // 无法解析json请求，就返回原始body
                            resolve(body);
                        }
                    } else {
                        reject(error);
                    }
                });
            });
        }       
    }

    /**
     * 登录
     */
    login (email, code, options = {}) {
        let params = {
            'email':email,
            'code':code
        };
        params = objectTools.merge(params, options);
        return this.commonHttp('/v2/api/auth/login', 'POST', params);
    }

     /**
     * 退出
     * ticket 登录凭证
     */
    logout (ticket, options = {}) {
        let params = {
            'ticket': ticket
        };
        params = objectTools.merge(params, options);
        return this.commonHttp('/v2/api/auth/logout', 'POST', params);
    }

    /**
     * 获取用户登录验证类型
     * email 用户邮箱地址
     */
    auth_type (email, options = {}) {
        let params = {
            'email': email
        };
        params = objectTools.merge(params, options);
        return this.commonHttp('/v2/api/auth/type', 'GET', params);
    }

    /**
     * 发送短信，验证类型为短信用户可用
     * email 用户邮箱地址
     */
    auth_sms (email, options = {}) {
        let params = {
            'email': email
        };
        params = objectTools.merge(params, options);
        return this.commonHttp('/v2/api/auth/send/sms', 'POST', params);
    }

    /**
     * 登录验证 返回用户信息
     * ticket 登录凭证
     */
    auth_verify (ticket, options = {}) {
        let params = {
            'ticket': ticket
        };
        params = objectTools.merge(params, options);
        return this.commonHttp('/v2/api/auth/verify', 'POST', params);
    }

    /**
     * 路由非严格验证（验证的路由不在应用路由的范围内，通过验证）
     * ticket 登录凭证
     * route 路由地址
     * method 路由请求方式，如：get，post，不区分大小写
     * skey 作用域key
     */
    auth_verify_route (ticket, route, method, scope, options = {}) {
        let params = {
            'ticket': ticket,
            'route': route,
            'method': method,
            'skey': scope
        };
        params = objectTools.merge(params, options);
        return this.commonHttp('/v2/api/auth/verify/route', 'POST', params);
    }

    /**
     * 严格路由验证（验证的路由不在应用路由的范围内，验证不通过）
     * ticket 登录凭证
     * route 路由地址
     * method 路由请求方式，如：get，post，不区分大小写
     * skey 作用域key
     */
    auth_verify_route_strict (ticket, route, method, scope, options = {}) {
        let params = {
            'ticket': ticket,
            'route': route,
            'method': method,
            'skey': scope
        };
        params = objectTools.merge(params, options);
        return this.commonHttp('/v2/api/auth/verify/route/strict', 'POST', params);
    }

    /**
     * 安全令牌验证
     */
    safe_verify (ticket, code, options = {}) {
        let params = {
            'ticket': ticket,
            'code': code
        };
        params = objectTools.merge(params, options);
        return this.commonHttp('/v2/api/auth/safe/verify', 'POST', params);
    }

    /**
     * 获取用户信息
     * required_fields 
     *  1 => info 用户信息
     *  2 => current_scope_info 用户当前作用域信息
     *  3 => scope_list 用户拥有的作用域列表
     *  4 => menus 用户菜单信息
     *  5 => system_info 用户系统信息，目前只有系统角色关键词
     */
    user_info (ticket, requiredFields, options = {}) {
        let params = {
            'ticket': ticket,
            'required_fields': requiredFields
        };
        params = objectTools.merge(params, options);
        return this.commonHttp('/v2/api/auth/user/info', 'GET', params);
    }

    /**
     * 获取应用作用域列表
     */
    get_scope_list (options = {}) {
        let params = {};
        params = objectTools.merge(params, options);
        return this.commonHttp('/v2/api/app/scope/list', 'GET', params);
    }

    /**
     * 获取某个作用域下拥有某个角色的用户列表
     */
    user_list_of_role (scope, keyword, options = {}) {
        let params = {
            'skey': scope,
            'keyword': keyword
        };
        params = objectTools.merge(params, options);
        return this.commonHttp('/v2/api/app/scope/role/user/list', 'GET', params);
    }

    /**
     * 获取作用域管理员
     */
    get_scope_managers ( scope = '', options = {}) {
        let params = {
            'skey': scope
        };
        params = objectTools.merge(params, options);
        return this.commonHttp('/v2/api/app/scope/managers', 'GET', params);
    }
   

}

module.exports = BoxApp;
 
 
 
 
